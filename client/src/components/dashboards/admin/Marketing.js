import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { Avatar, Button, Card, CardActions, CardContent, Chip, Dialog, DialogActions, DialogContent, DialogTitle, Divider, FormControl, IconButton, InputLabel, List, ListItem, ListItemAvatar, ListItemText, MenuItem, Paper, Select, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField, Typography, } from "@mui/material";
import { Grid as MuiGrid } from "@mui/material";
import Box from "@mui/material/Box";
// Create a wrapper component for Grid that works with Material UI v5
const Grid = (props) => {
    const { item, ...rest } = props;
    return _jsx(MuiGrid, { ...rest });
};
import { Email as EmailIcon, Notifications as NotificationsIcon, Campaign as CampaignIcon, Edit as EditIcon, Delete as DeleteIcon, Add as AddIcon, Send as SendIcon, } from "@mui/icons-material";
import axios from "axios";
const Marketing = () => {
    const [activeTab, setActiveTab] = useState("campaigns");
    const [campaigns, setCampaigns] = useState([]);
    const [emailTemplates, setEmailTemplates] = useState([]);
    const [openDialog, setOpenDialog] = useState(false);
    const [dialogType, setDialogType] = useState("");
    const [loading, setLoading] = useState(false);
    useEffect(() => {
        fetchData();
    }, [activeTab]);
    const fetchData = async () => {
        setLoading(true);
        try {
            if (activeTab === "campaigns") {
                const response = await axios.get("/api/admin/marketing/campaigns");
                setCampaigns(response.data);
            }
            else if (activeTab === "email") {
                const response = await axios.get("/api/admin/marketing/email-templates");
                setEmailTemplates(response.data);
            }
        }
        catch (error) {
            console.error("Error fetching marketing data:", error);
        }
        finally {
            setLoading(false);
        }
    };
    const handleOpenDialog = (type) => {
        setDialogType(type);
        setOpenDialog(true);
    };
    const handleCloseDialog = () => {
        setOpenDialog(false);
    };
    const renderCampaigns = () => (_jsxs(Box, { children: [_jsxs(Box, { sx: { display: "flex", justifyContent: "space-between", mb: 2 }, children: [_jsx(Typography, { variant: "h6", children: "Marketing Campaigns" }), _jsx(Button, { variant: "contained", startIcon: _jsx(AddIcon, {}), onClick: () => handleOpenDialog("newCampaign"), children: "New Campaign" })] }), _jsx(TableContainer, { component: Paper, children: _jsxs(Table, { children: [_jsx(TableHead, { children: _jsxs(TableRow, { children: [_jsx(TableCell, { children: "Name" }), _jsx(TableCell, { children: "Type" }), _jsx(TableCell, { children: "Status" }), _jsx(TableCell, { children: "Target Audience" }), _jsx(TableCell, { children: "Period" }), _jsx(TableCell, { children: "Budget" }), _jsx(TableCell, { children: "Performance" }), _jsx(TableCell, { children: "Actions" })] }) }), _jsxs(TableBody, { children: [campaigns.map((campaign) => (_jsxs(TableRow, { children: [_jsx(TableCell, { children: campaign.name }), _jsx(TableCell, { children: campaign.type }), _jsx(TableCell, { children: _jsx(Chip, { label: campaign.status, color: campaign.status === "Active"
                                                    ? "success"
                                                    : campaign.status === "Scheduled"
                                                        ? "info"
                                                        : campaign.status === "Completed"
                                                            ? "default"
                                                            : "warning", size: "small" }) }), _jsx(TableCell, { children: campaign.targetAudience }), _jsxs(TableCell, { children: [new Date(campaign.startDate).toLocaleDateString(), " -", " ", new Date(campaign.endDate).toLocaleDateString()] }), _jsxs(TableCell, { children: ["$", campaign.budget.toLocaleString()] }), _jsx(TableCell, { children: _jsxs(Box, { children: [_jsxs(Typography, { variant: "body2", children: ["CTR: ", campaign.performance.ctr.toFixed(2), "%"] }), _jsxs(Typography, { variant: "body2", children: ["Conv: ", campaign.performance.conversionRate.toFixed(2), "%"] })] }) }), _jsxs(TableCell, { children: [_jsx(IconButton, { size: "small", onClick: () => handleOpenDialog("editCampaign"), children: _jsx(EditIcon, { fontSize: "small" }) }), _jsx(IconButton, { size: "small", color: "error", children: _jsx(DeleteIcon, { fontSize: "small" }) })] })] }, campaign.id))), campaigns.length === 0 && (_jsx(TableRow, { children: _jsx(TableCell, { colSpan: 8, align: "center", children: "No campaigns found" }) }))] })] }) })] }));
    const renderEmailMarketing = () => (_jsxs(Box, { children: [_jsxs(Box, { sx: { display: "flex", justifyContent: "space-between", mb: 2 }, children: [_jsx(Typography, { variant: "h6", children: "Email Templates" }), _jsx(Button, { variant: "contained", startIcon: _jsx(AddIcon, {}), onClick: () => handleOpenDialog("newTemplate"), children: "New Template" })] }), _jsxs(Grid, { container: true, spacing: 2, children: [emailTemplates.map((template) => (_jsx(Grid, { xs: 12, md: 4, lg: 4, children: _jsxs(Card, { children: [_jsxs(CardContent, { children: [_jsxs(Box, { sx: { display: "flex", justifyContent: "space-between" }, children: [_jsx(Typography, { variant: "h6", component: "div", children: template.name }), _jsx(Chip, { label: template.category, size: "small" })] }), _jsxs(Typography, { variant: "body2", color: "text.secondary", sx: { mt: 1 }, children: ["Subject: ", template.subject] }), _jsxs(Typography, { variant: "body2", color: "text.secondary", children: ["Preview: ", template.previewText] }), _jsxs(Typography, { variant: "caption", display: "block", sx: { mt: 1 }, children: ["Last modified:", " ", new Date(template.lastModified).toLocaleDateString()] })] }), _jsxs(CardActions, { children: [_jsx(Button, { size: "small", startIcon: _jsx(EditIcon, {}), children: "Edit" }), _jsx(Button, { size: "small", startIcon: _jsx(SendIcon, {}), children: "Send Test" }), _jsx(Button, { size: "small", color: "error", startIcon: _jsx(DeleteIcon, {}), children: "Delete" })] })] }) }, template.id))), emailTemplates.length === 0 && (_jsx(Grid, { xs: 12, children: _jsx(Paper, { sx: { p: 2, textAlign: "center" }, children: _jsx(Typography, { children: "No email templates found" }) }) }))] })] }));
    const renderNotifications = () => (_jsxs(Box, { children: [_jsxs(Box, { sx: { display: "flex", justifyContent: "space-between", mb: 2 }, children: [_jsx(Typography, { variant: "h6", children: "Push Notifications" }), _jsx(Button, { variant: "contained", startIcon: _jsx(AddIcon, {}), onClick: () => handleOpenDialog("newNotification"), children: "New Notification" })] }), _jsxs(Paper, { sx: { p: 2 }, children: [_jsx(Typography, { variant: "body2", color: "text.secondary", sx: { mb: 2 }, children: "Create and manage push notifications to engage with your users." }), _jsxs(Box, { sx: { mb: 3 }, children: [_jsx(Typography, { variant: "subtitle1", sx: { mb: 1 }, children: "Quick Actions" }), _jsxs(Grid, { container: true, spacing: 2, children: [_jsx(Grid, { xs: 12, sm: 6, md: 3, children: _jsx(Button, { variant: "outlined", fullWidth: true, startIcon: _jsx(NotificationsIcon, {}), children: "Send to All Users" }) }), _jsx(Grid, { xs: 12, sm: 6, md: 3, children: _jsx(Button, { variant: "outlined", fullWidth: true, startIcon: _jsx(NotificationsIcon, {}), children: "Send to Car Owners" }) }), _jsx(Grid, { xs: 12, sm: 6, md: 3, children: _jsx(Button, { variant: "outlined", fullWidth: true, startIcon: _jsx(NotificationsIcon, {}), children: "Send to Customers" }) }), _jsx(Grid, { xs: 12, sm: 6, md: 3, children: _jsx(Button, { variant: "outlined", fullWidth: true, startIcon: _jsx(NotificationsIcon, {}), children: "Schedule Notification" }) })] })] }), _jsx(Typography, { variant: "subtitle1", sx: { mb: 1 }, children: "Recent Notifications" }), _jsxs(List, { children: [_jsxs(ListItem, { children: [_jsx(ListItemAvatar, { children: _jsx(Avatar, { children: _jsx(NotificationsIcon, {}) }) }), _jsx(ListItemText, { primary: "Summer Discount Announcement", secondary: "Sent to 1,245 users \u2022 87% open rate \u2022 July 5, 2025" }), _jsx(Button, { size: "small", children: "View Details" })] }), _jsx(Divider, { variant: "inset", component: "li" }), _jsxs(ListItem, { children: [_jsx(ListItemAvatar, { children: _jsx(Avatar, { children: _jsx(NotificationsIcon, {}) }) }), _jsx(ListItemText, { primary: "New Feature Alert", secondary: "Sent to 2,103 users \u2022 92% open rate \u2022 July 1, 2025" }), _jsx(Button, { size: "small", children: "View Details" })] })] })] })] }));
    return (_jsxs(Box, { children: [_jsx(Typography, { variant: "h5", component: "h2", sx: { mb: 3 }, children: "Marketing & Promotions" }), _jsx(Box, { sx: { mb: 3 }, children: _jsxs(Grid, { container: true, spacing: 2, children: [_jsx(Grid, { xs: 12, md: 6, children: _jsxs(Card, { children: [_jsxs(CardContent, { children: [_jsxs(Box, { sx: { display: "flex", alignItems: "center", mb: 1 }, children: [_jsx(CampaignIcon, { color: "primary", sx: { mr: 1 } }), _jsx(Typography, { variant: "h6", children: "Campaigns" })] }), _jsx(Typography, { variant: "body2", color: "text.secondary", children: "Manage marketing campaigns across different channels" })] }), _jsx(CardActions, { children: _jsx(Button, { size: "small", onClick: () => setActiveTab("campaigns"), children: "View Campaigns" }) })] }) }), _jsx(Grid, { xs: 12, md: 6, children: _jsxs(Card, { children: [_jsxs(CardContent, { children: [_jsxs(Box, { sx: { display: "flex", alignItems: "center", mb: 1 }, children: [_jsx(EmailIcon, { color: "primary", sx: { mr: 1 } }), _jsx(Typography, { variant: "h6", children: "Email Marketing" })] }), _jsx(Typography, { variant: "body2", color: "text.secondary", children: "Create and manage email templates and campaigns" })] }), _jsx(CardActions, { children: _jsx(Button, { size: "small", onClick: () => setActiveTab("email"), children: "View Templates" }) })] }) }), _jsx(Grid, { xs: 12, md: 6, children: _jsxs(Card, { children: [_jsxs(CardContent, { children: [_jsxs(Box, { sx: { display: "flex", alignItems: "center", mb: 1 }, children: [_jsx(NotificationsIcon, { color: "primary", sx: { mr: 1 } }), _jsx(Typography, { variant: "h6", children: "Push Notifications" })] }), _jsx(Typography, { variant: "body2", color: "text.secondary", children: "Send targeted push notifications to users" })] }), _jsx(CardActions, { children: _jsx(Button, { size: "small", onClick: () => setActiveTab("notifications"), children: "Manage Notifications" }) })] }) })] }) }), _jsxs(Paper, { sx: { p: 3 }, children: [activeTab === "campaigns" && renderCampaigns(), activeTab === "email" && renderEmailMarketing(), activeTab === "notifications" && renderNotifications()] }), _jsxs(Dialog, { open: openDialog, onClose: handleCloseDialog, maxWidth: "md", fullWidth: true, children: [_jsxs(DialogTitle, { children: [dialogType === "newCampaign" && "Create New Campaign", dialogType === "editCampaign" && "Edit Campaign", dialogType === "newTemplate" && "Create Email Template", dialogType === "newNotification" && "Create Push Notification"] }), _jsx(DialogContent, { children: _jsxs(Box, { sx: { p: 2 }, children: [_jsxs(Typography, { variant: "body2", color: "text.secondary", sx: { mb: 2 }, children: [dialogType.includes("Campaign") &&
                                            "Fill in the details to create a new marketing campaign.", dialogType === "newTemplate" &&
                                            "Design a new email template for your marketing campaigns.", dialogType === "newNotification" &&
                                            "Create a new push notification to send to your users."] }), _jsxs(Grid, { container: true, spacing: 2, children: [_jsx(Grid, { xs: 12, children: _jsx(TextField, { label: "Name", fullWidth: true, variant: "outlined" }) }), dialogType.includes("Campaign") && (_jsxs(_Fragment, { children: [_jsx(Grid, { xs: 12, sm: 6, children: _jsxs(FormControl, { fullWidth: true, children: [_jsx(InputLabel, { children: "Campaign Type" }), _jsxs(Select, { label: "Campaign Type", children: [_jsx(MenuItem, { value: "email", children: "Email" }), _jsx(MenuItem, { value: "social", children: "Social Media" }), _jsx(MenuItem, { value: "discount", children: "Discount" }), _jsx(MenuItem, { value: "referral", children: "Referral" })] })] }) }), _jsx(Grid, { xs: 12, sm: 6, children: _jsxs(FormControl, { fullWidth: true, children: [_jsx(InputLabel, { children: "Target Audience" }), _jsxs(Select, { label: "Target Audience", children: [_jsx(MenuItem, { value: "all", children: "All Users" }), _jsx(MenuItem, { value: "owners", children: "Car Owners" }), _jsx(MenuItem, { value: "customers", children: "Customers" }), _jsx(MenuItem, { value: "inactive", children: "Inactive Users" })] })] }) })] })), dialogType === "newTemplate" && (_jsxs(_Fragment, { children: [_jsx(Grid, { xs: 12, children: _jsx(TextField, { label: "Subject Line", fullWidth: true, variant: "outlined" }) }), _jsx(Grid, { xs: 12, children: _jsx(TextField, { label: "Preview Text", fullWidth: true, variant: "outlined" }) })] })), dialogType === "newNotification" && (_jsxs(_Fragment, { children: [_jsx(Grid, { xs: 12, children: _jsx(TextField, { label: "Title", fullWidth: true, variant: "outlined" }) }), _jsx(Grid, { xs: 12, children: _jsx(TextField, { label: "Message", fullWidth: true, multiline: true, rows: 3, variant: "outlined" }) })] }))] })] }) }), _jsxs(DialogActions, { children: [_jsx(Button, { onClick: handleCloseDialog, children: "Cancel" }), _jsx(Button, { variant: "contained", onClick: handleCloseDialog, children: dialogType.startsWith("new") ? "Create" : "Save" })] })] })] }));
};
export default Marketing;
